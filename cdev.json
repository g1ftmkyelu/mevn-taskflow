{
  "projectId": "68a497f98dcf79efa4419af2",
  "projectName": "MEVN-TaskFlow",
  "description": "<SRS_START>\n\n# **SOFTWARE REQUIREMENTS SPECIFICATION**\n\n<SECTION_START id=\"project_overview\">\n## **1. Project Overview**\n- **Project Name**: MEVN TaskFlow\n- **Core Purpose**: A simple, robust, and intuitive web application for users to manage their personal to-do lists, enabling creation, viewing, updating, and deletion of tasks with user authentication.\n- **Target Users**: Individuals seeking an efficient way to organize and track their daily tasks.\n- **Technology Stack Analysis**:\n  - **Frontend**: Vue.js 3 (Composition API), Pinia (State Management), Vuetify/Element Plus (UI Framework), VeeValidate (Form Validation), Axios (HTTP Client), Vue Icons (Icon Library), Vite (Bundler).\n  - **Backend**: Node.js (Express.js Framework), Mongoose (MongoDB ODM).\n  - **Database**: MongoDB (NoSQL Document Database).\n  - **Auth**: JSON Web Tokens (JWT) for stateless authentication.\n  - **Deployment**: Frontend (e.g., Vercel, Netlify), Backend (e.g., Heroku, AWS EC2, DigitalOcean Droplet).\n<SECTION_END id=\"project_overview\">\n\n<SECTION_START id=\"architecture_patterns\">\n## **2. Architecture & Design Patterns**\n- **Architecture Style**: Progressive Full-Stack (Single Page Application Frontend + RESTful API Backend). The frontend (Vue.js) consumes data from the backend (Express.js API).\n- **Data Flow**:\n    - **Frontend**: Unidirectional data flow using Pinia for centralized state management. Components dispatch actions/mutations to update the store, which then updates the UI. Axios handles API calls to the backend.\n    - **Backend**: Request-Response model via RESTful API. Data processed by controllers, interacting with services/models, and persisted via Mongoose.\n- **Design Patterns**:\n    - **Backend**: MVC (Model-View-Controller - conceptual for API, where 'View' is JSON response), Repository Pattern (for data access abstraction), Dependency Injection (for services/controllers), Middleware (for authentication, logging, error handling).\n    - **Frontend**: Component-Based Architecture, Composition API (Vue.js), Store Pattern (Pinia).\n<SECTION_END id=\"architecture_patterns\">\n\n<SECTION_START id=\"data_architecture\">\n## **3. Data Architecture**\n- **Database Type**: NoSQL (MongoDB).\n- **Key Entities & Relationships**:\n    - **User**:\n        - `_id` (ObjectId)\n        - `username` (String, unique, required)\n        - `email` (String, unique, required)\n        - `password` (String, required, hashed)\n        - `createdAt` (Date)\n        - `updatedAt` (Date)\n    - **Todo**:\n        - `_id` (ObjectId)\n        - `userId` (ObjectId, ref: 'User', required) - *Relationship: User has many Todos*\n        - `title` (String, required)\n        - `description` (String)\n        - `completed` (Boolean, default: false)\n        - `dueDate` (Date)\n        - `createdAt` (Date)\n        - `updatedAt` (Date)\n- **Persistence Strategy**:\n    - **ORM/ODM**: Mongoose ODM for MongoDB interaction, providing schema definition, validation, and query building.\n    - **Migrations**: Schema changes handled by Mongoose's flexible schema design; explicit migration scripts may be used for complex data transformations if needed.\n    - **Indexing**: Indexes on `username`, `email` in User collection and `userId` in Todo collection for efficient querying.\n<SECTION_END id=\"data_architecture\">\n\n<SECTION_START id=\"project_structure\">\n## **4. Project Structure**\n- **Folder Structure**: Monorepo approach with distinct `frontend` and `backend` directories.\n    - **Root**:\n        - `frontend/` (Vue.js application)\n            - `src/`\n                - `assets/`\n                - `components/`\n                - `views/`\n                - `stores/` (Pinia modules)\n                - `router/`\n                - `services/` (Axios API calls)\n                - `utils/`\n                - `main.js`\n                - `App.vue`\n            - `public/`\n            - `package.json`\n            - `vite.config.js`\n            - `.env`\n        - `backend/` (Express.js application)\n            - `src/`\n                - `config/` (DB connection, environment variables)\n                - `models/` (Mongoose schemas)\n                - `controllers/`\n                - `routes/`\n                - `middleware/` (Auth, error handling)\n                - `services/` (Business logic)\n                - `utils/` (Helpers, JWT generation)\n                - `app.js` (Express app setup)\n            - `package.json`\n            - `.env`\n            - `server.js` (Entry point)\n        - `.gitignore`\n        - `README.md`\n- **Config Files**:\n    - `package.json` (for both frontend and backend): Defines project metadata, scripts, and dependencies with versioning.\n    - `vite.config.js`: Frontend build configuration.\n    - `.env` files (for both frontend and backend): Environment-specific variables (e.g., API URLs, database connection strings, JWT secrets).\n    - `nodemon.json` (backend): For development server auto-restarts.\n    - ESLint/Prettier config files: For code quality and formatting.\n    - Jest/Vitest config files: For testing setup.\n<SECTION_END id=\"project_structure\">\n\n<SECTION_START id=\"implementation_roadmap\">\n## **5. Implementation Roadmap**\n\n### **Phase 1: Setup**\n- Initialize `backend` directory with Node.js/Express.js project.\n- Initialize `frontend` directory with Vue.js/Vite project.\n- Install core dependencies (Express, Mongoose, Vue, Pinia, Vite, etc.).\n- Configure `.env` files for both frontend and backend.\n- Set up basic folder structures for both applications.\n\n### **Phase 2: Data Layer**\n- Configure MongoDB connection in the backend using Mongoose.\n- Define Mongoose schemas and models for `User` and `Todo` entities.\n- Implement basic database connection and error handling.\n\n### **Phase 3: Auth & Security**\n- Implement user registration (`/api/auth/register`) and login (`/api/auth/login`) endpoints in the backend.\n- Integrate JWT for token generation upon login and verification for protected routes.\n- Implement password hashing (e.g., bcryptjs) for user security.\n- Create authentication middleware to protect API routes.\n\n### **Phase 4: Business Logic & API**\n- Develop RESTful API endpoints for `Todo` management:\n    - `POST /api/todos`: Create a new todo (requires authentication).\n    - `GET /api/todos`: Retrieve all todos for the authenticated user.\n    - `GET /api/todos/:id`: Retrieve a specific todo by ID.\n    - `PUT /api/todos/:id`: Update an existing todo by ID.\n    - `DELETE /api/todos/:id`: Delete a todo by ID.\n- Implement business logic for todo operations (e.g., ensuring a user can only access their own todos).\n- Implement basic user profile endpoint (`GET /api/users/me`).\n\n### **Phase 5: UI (If Applicable)**\n- Design and implement core UI layouts using Vuetify/Element Plus.\n- Create Vue components for user authentication (Login, Register forms).\n- Create Vue components for Todo management (Todo list, Todo item, Add/Edit Todo forms).\n- Integrate Pinia stores for managing application state (e.g., user authentication status, todo list).\n- Implement Axios for making API calls to the backend.\n- Integrate VeeValidate for client-side form validation.\n- Implement Vue Router for navigation between views (Login, Register, Todo List).\n- Display and manage authentication tokens (e.g., in localStorage).\n- Integrate Vue Icons for visual elements.\n<SECTION_END id=\"implementation_roadmap\">\n\n<SECTION_START id=\"feature_implementation\">\n## **6. Key Features by Stack**\n- **Auth**:\n    - **Backend**: JWT (JSON Web Tokens) for stateless authentication. Token generation on login, verification middleware for protected routes. Password hashing with `bcryptjs`.\n    - **Frontend**: Axios interceptors to attach JWT to outgoing requests. Pinia store to manage user authentication state and token storage (e.g., in localStorage).\n- **State Management**:\n    - **Frontend**: Pinia for centralized, reactive state management. Separate stores for `auth` and `todos` modules.\n<SECTION_END id=\"feature_implementation\">\n\n<SECTION_START id=\"api_design\">\n## **7. API Design**\n- **Style**: RESTful API.\n- **Base URL**: `/api/v1` (or simply `/api`)\n- **Endpoints**:\n    - **Auth**:\n        - `POST /api/auth/register`: User registration.\n        - `POST /api/auth/login`: User login, returns JWT.\n    - **Users**:\n        - `GET /api/users/me`: Get authenticated user's profile (protected).\n    - **Todos**:\n        - `GET /api/todos`: Get all todos for the authenticated user (protected).\n        - `GET /api/todos/:id`: Get a specific todo by ID (protected).\n        - `POST /api/todos`: Create a new todo (protected).\n        - `PUT /api/todos/:id`: Update an existing todo (protected).\n        - `DELETE /api/todos/:id`: Delete a todo (protected).\n    - **Health**:\n        - `GET /api/health`: Basic health check endpoint.\n<SECTION_END id=\"api_design\">\n\n<SECTION_START id=\"security_implementation\">\n## **8. Security**\n- **Web (Frontend)**:\n    - **XSS (Cross-Site Scripting)**: Vue.js automatically escapes HTML content. Input validation (VeeValidate) and sanitization on the backend.\n    - **CSRF (Cross-Site Request Forgery)**: Less critical for SPA with JWT (stateless), but ensure no sensitive operations are performed via GET requests.\n    - **HTTPS**: Enforce HTTPS for all communication in production.\n    - **Input Validation**: Client-side validation using VeeValidate to provide immediate feedback; server-side validation is mandatory.\n- **APIs (Backend)**:\n    - **Authentication**: JWT-based authentication for all protected endpoints. Tokens stored securely (e.g., HTTP-only cookies or localStorage with care).\n    - **Authorization**: Ensure users can only access/modify their own resources (e.g., a user can only update/delete their own todos).\n    - **Input Validation**: Robust server-side input validation (e.g., using `express-validator` or Joi) to prevent injection attacks and malformed data.\n    - **Password Hashing**: Use strong, one-way hashing algorithms (e.g., bcrypt) for storing user passwords.\n    - **Rate Limiting**: Implement rate limiting on authentication endpoints to prevent brute-force attacks.\n    - **HTTPS**: Enforce HTTPS for all API communication.\n    - **Error Handling**: Avoid revealing sensitive information in error messages.\n    - **CORS**: Properly configure CORS headers to allow requests only from the trusted frontend origin.\n<SECTION_END id=\"security_implementation\">\n\n<SECTION_START id=\"implementation_guidelines\">\n## **9. AI Implementation Guidelines**\n1.  **Stack-aware conventions**: Generate code adhering to MEVN best practices (e.g., Vue Composition API, Pinia store structure, Express middleware, Mongoose schema definitions).\n2.  **Minimal dependencies with versioning**: Utilize core libraries and frameworks specified. Ensure `package.json` files include precise versioning for all dependencies.\n3.  **Standard testing setup**: Include basic unit/integration test configurations (e.g., Vitest for frontend, Jest for backend) and example tests for critical components/endpoints.\n4.  **Secure, maintainable, and modular code**: Prioritize secure coding practices (e.g., input sanitization, proper authentication). Generate modular code with clear separation of concerns (e.g., controllers, services, models in backend; components, stores, services in frontend).\n5.  **Clean documentation and structure**: Generate clear comments for complex logic, and ensure the project structure is intuitive and follows the outlined plan. Include basic `README.md` files for both frontend and backend.\n<SECTION_END id=\"implementation_guidelines\">\n\n<SRS_END>",
  "techStack": "mevn",
  "createdAt": "2025-08-19T15:27:53.392Z",
  "lastModified": "2025-08-19T15:27:53.392Z",
  "frontendPort": 9373
}